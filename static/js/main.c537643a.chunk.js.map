{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","task","tasks","map","t","className","isDone","type","checked","onChange","e","changeTaskStatus","id","currentTarget","text","onClick","removeTask","useState","newTaskText","setNewTaskText","error","setError","addTask","trimmedText","trim","AllButtonClass","filter","ActiveButtonClass","CompletedButtonClass","errorMessage","title","value","onKeyPress","code","changeFilter","removeTodolist","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","taskID","isDoneValue","todolistId","find","newTask","todolistTasks","todolist","tl","tasksFilter","todoList","getTasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c537643a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport './App.css';\r\nimport {filterTypeValue} from \"./App\";\r\n\r\n\r\nexport type tasksType = {\r\n    id: string\r\n    text: string\r\n    isDone: boolean\r\n}\r\n\r\ntype todolistType = {\r\n    changeTaskStatus: (taskID: string, isDoneValue: boolean, todolistId: string) => void\r\n    title: string\r\n    tasks: Array<tasksType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: filterTypeValue, todolistId: string) => void\r\n    addTask: (text: string, todolistId: string) => void\r\n    id: string\r\n    filter: filterTypeValue\r\n    removeTodolist: (id: string) => void\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<todolistType> = (props) => {\r\n    const removeTodoList = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const task = props.tasks.map(t => {\r\n        const onRemoveHadler = () => {\r\n            props.removeTask(t.id, props.id)\r\n        }\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={t.isDone}\r\n                onChange={changeStatus}/>\r\n            <span>{t.text}</span>\r\n            <button onClick={onRemoveHadler}>x</button>\r\n        </li>\r\n    });\r\n\r\n    const [newTaskText, setNewTaskText] = useState(\"\");\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setNewTaskText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.code === \"Enter\") {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        const trimmedText = newTaskText.trim();\r\n        if (trimmedText) {\r\n            props.addTask(trimmedText, props.id);\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setNewTaskText(\"\");\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"All\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"Active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"Completed\", props.id)\r\n\r\n    const AllButtonClass = props.filter === \"All\" ? \"active-filter\" : \" \";\r\n    const ActiveButtonClass = props.filter === \"Active\" ? \"active-filter\" : \" \";\r\n    const CompletedButtonClass = props.filter === \"Completed\" ? \"active-filter\" : \" \";\r\n    const errorMessage = error ? <div className={\"error-message\"}>{error}</div> : null;\r\n\r\n\r\n    return (\r\n        <div className={\"todoListWrapper\"}>\r\n            <h3>{props.title}</h3>\r\n\r\n            <div>\r\n                <input value={newTaskText}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? \"error-Input\" : \"\"}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {errorMessage}\r\n            </div>\r\n\r\n            <ul>\r\n                {task}\r\n            </ul>\r\n\r\n\r\n            <div>\r\n                <button className={AllButtonClass} onClick={onAllClickHandler}>All</button>\r\n                <button className={ActiveButtonClass} onClick={onActiveClickHandler}>Active</button>\r\n                <button className={CompletedButtonClass} onClick={onCompletedClickHandler}>Completed</button>\r\n                <button onClick={removeTodoList}>x</button>\r\n            </div>\r\n        </div>)\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {tasksType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type filterTypeValue = \"All\" | \"Active\" | \"Completed\";\r\nexport type todolistTypeArr = {\r\n    id: string\r\n    title: string\r\n    filter: filterTypeValue\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<tasksType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const [todolists, setTodolists] = useState<Array<todolistTypeArr>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"All\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"All\"},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), text: \"HTML and CSS\", isDone: true},\r\n            {id: v1(), text: \"JS\", isDone: true},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), text: \"Milk\", isDone: true},\r\n            {id: v1(), text: \"React book\", isDone: true},\r\n        ]\r\n    });\r\n    \r\n    function changeTaskStatus(taskID: string, isDoneValue: boolean, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId];\r\n        let task = todolistTasks.find( t => t.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDoneValue;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function addTask(text: string, todolistId: string ) {\r\n\r\n        let newTask = {id: v1(), text: text, isDone: false};\r\n        let todolistTasks = tasks[todolistId];\r\n        tasks[todolistId] = [newTask, ...todolistTasks];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId];\r\n        tasks[todolistId] = todolistTasks.filter( t => t.id != id);\r\n\r\n        setTasks({...tasks});\r\n\r\n    }\r\n\r\n    function changeFilter(value: filterTypeValue, todolistId: string) {\r\n        let todolist =  todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist( id: string) {\r\n        setTodolists(todolists.filter(tl => tl.id != id))\r\n        delete tasks[id];\r\n        setTasks({...tasks});\r\n    }\r\n    function getTasksForTodoList(todoList: todolistTypeArr): Array<tasksType> {\r\n        switch (todoList.filter){\r\n            case \"Active\":\r\n                return tasks[todoList.id].filter(t => t.isDone === false)\r\n            case \"Completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone === true)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div className=\"Todolist\">\r\n            {\r\n                todolists.map(tl => {\r\n                  const tasksFilter = getTasksForTodoList(tl)\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        tasks={tasksFilter}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}