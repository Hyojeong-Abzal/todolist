{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","payload","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","JSON","stringify","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","isInit","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14e222fc.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'e63f5bfc-9e87-4bfe-bfb0-c2fdad6af5c9',\r\n  },\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    const promise = instance.get<TodolistType[]>('todo-lists')\r\n    return promise\r\n  },\r\n  createTodolist(title: string) {\r\n    const promise = instance.post<ResponseType<{ item: TodolistType }>>(\r\n      'todo-lists',\r\n      { title: title }\r\n    )\r\n    return promise\r\n  },\r\n  deleteTodolist(id: string) {\r\n    const promise = instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    return promise\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    const promise = instance.put<ResponseType>(`todo-lists/${id}`, {\r\n      title: title,\r\n    })\r\n    return promise\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`\r\n    )\r\n  },\r\n  createTask(todolistId: string, taskTitile: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(\r\n      `todo-lists/${todolistId}/tasks`,\r\n      { title: taskTitile }\r\n    )\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<TaskType>>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`,\r\n      model\r\n    )\r\n  },\r\n}\r\n//\r\nexport type loginAPItype = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\nexport type FormErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\n//login api\r\n\r\nexport const authAPI = {\r\n  login(payload: loginAPItype) {\r\n    return instance.post<ResponseType<{ userId: null }>>(`auth/login`, payload)\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<FormErrorType>>('auth/me')\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType>(`/auth/login`)\r\n  },\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { authAPI, loginAPItype } from '../../../api/todolists-api'\r\nimport {\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType,\r\n} from '../../../app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from '../../../utils/error-utils'\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return { ...state, isLoggedIn: action.value }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC =\r\n  (data: loginAPItype) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI\r\n      .login(data)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(setIsLoggedInAC(true))\r\n          dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n      })\r\n  }\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI\r\n    .logout()\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n  | ReturnType<typeof setIsLoggedInAC>\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n","import { Dispatch } from 'redux'\r\nimport { authAPI } from '../api/todolists-api'\r\nimport { setIsLoggedInAC } from '../features/TodolistsList/Login/auth-reducer'\r\n\r\nconst initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return { ...state, status: action.status }\r\n    case 'APP/SET-ERROR':\r\n      return { ...state, error: action.error }\r\n    case 'APP/SET-ISINITIALIZED':\r\n      return { ...state, isInitialized: action.value }\r\n    default:\r\n      return { ...state }\r\n  }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: string | null\r\n  isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n  ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n  ({ type: 'APP/SET-STATUS', status } as const)\r\n\r\nexport const setisInitialized = (value: boolean) =>\r\n  ({ type: 'APP/SET-ISINITIALIZED', value } as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | ReturnType<typeof setisInitialized>\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI\r\n    .me()\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n      } else {\r\n      }\r\n    })\r\n    .finally(() => dispatch(setisInitialized(true)))\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { status }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, { title: newTitle }, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        debugger\r\n        return <Redirect to={'/Login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './auth-reducer';\r\nimport { AppRootStateType } from '../../../app/store';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    type FormErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters at least';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values));\r\n            formik.resetForm()\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                            formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n                        />\r\n                        {formik.touched.password &&\r\n                            formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('remeberMe')}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { Login } from '../features/TodolistsList/Login/Login'\r\nimport { Switch } from 'react-router-dom'\r\nimport { logoutTC } from '../features/TodolistsList/Login/auth-reducer'\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInit = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInit) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button onClick={() => dispatch(logoutTC())} color='inherit'>Log out</Button>}\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n\r\n\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={\"/Login\"} render={() => <Login />} />\r\n                    <Route path={\"/404\"} render={() => <h1> 404: PAGE NOT FOUND</h1>} />\r\n                    <Redirect from={\"*\"} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport { authReducer } from '../features/TodolistsList/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}